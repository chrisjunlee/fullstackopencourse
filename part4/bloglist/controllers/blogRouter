const blogRouter = require('express').Router()
const Blog = require('../models/blog')
const User = require('../models/user')
const jwt = require('jsonwebtoken')

blogRouter.get('/', async (request, response) => {
    const blogs = await Blog
        .find({}).populate('user', { username: 1, name: 1})
    return response.json(blogs)
})

blogRouter.get('/:id', async (req, res, next) => {
    try
    {
        const blog = await Blog.findById(req.params.id)
        res.json(blog) 
    } catch (ex) {
        next(ex)
    }
})

blogRouter.post('/', async (request, response) => {
    if(!request.body.title) {
        return response.status(400).json( {error: "Title Missing"})
    }

    if (!request.body.url) {
        return response.status(400).json({ error: "Url Missing" })
    }

    const body = request.body

    const decodedToken = 
        jwt.verify(request.token, process.env.TOKEN_SECRET)

    if (!decodedToken.id) {
        return response.status(401).json({ error: 'token invalid' })
    }

    const user = await User.findById(decodedToken.id)
    
    const blog = new Blog({
        title: body.title,
        author: body.author,
        url: body.url,
        user: user.id
    })

    const result = await blog.save()
    user.blogs = user.blogs.concat(result._id)

    await user.save()

    response.status(201).json(result)
})

blogRouter.delete('/:id', async (req, res) => {
    if(req.params.id == "nuke") { 
        console.log('Clearing DB')
        await Blog.deleteMany({})
        res.status(204).end()
    }

    if (!req.token) {
        return res.status(400).json({error: "Must provide Token for delete"})
    }

    const decodedToken =
        jwt.verify(req.token, process.env.TOKEN_SECRET)

    if (!decodedToken.id) {
        return res.status(401).json({ error: 'token invalid' })
    }

    const user = await User.findById(decodedToken.id)

    // checking blog belongs to user
    const blog = await Blog.findById(req.params.id)

    console.log('token owner:', user.id, user.username)
    console.log('blog', blog)
    console.log('blog owner', blog.user.toString())

    if( blog.user.toString() == user.id.toString()) {
        await Blog.findByIdAndDelete(req.params.id)
        res.status(204).end()
    }
    else {
        return res.status(400).json({ error: "Blog does not belong to user" })
    }
    
})

blogRouter.put('/:id', async (req, res) => {
    console.log('Updating Blog', req.body)
    const updatedPerson = await Blog.findByIdAndUpdate(req.params.id, req.body, { new: true, runValidators: true, context: 'query' })
    res.status(200).json(updatedPerson)
})

module.exports = blogRouter